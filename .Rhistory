install.packages('randtoolbox')
install.packages('randtoolbox')
setwd("~/Documents/GitHub/Probability")
install.packages('randtoolbox')
source('~/Documents/GitHub/Probability/generateurs.R', echo=TRUE)
source('~/Documents/GitHub/Probability/distributions.R', echo=TRUE)
library(randtoolbox)
source('distributions.R')
n = 50
p = 0.5
B = LoiBinomiale(n,p,1000)
par(mfrow=c(1,2))
plot(table(B))
X = seq(from = 1, to = n, by =  1)
plot(dnorm(X,n*p, sqrt(n*p*(1-p))))
library(randtoolbox)
source('distributions.R')
n = 50
p = 0.5
B = LoiBinomiale(n,p,1000)
par(mfrow=c(1,2))
plot(table(B))
X = seq(from = 1, to = n, by =  1)
plot(dnorm(X,n*p, sqrt(n*p*(1-p))))
n2 = 500
X2 = Inversion(n2)
hist(X2)
X3 = Rejet(n2)
hist(X3)
X_lin = seq(from = 0, to = 1, by =  0.1)
plot(f(X_lin))
plot(BigF(X))
source('~/Documents/GitHub/Probability/tests.R', echo=TRUE)
source('~/Documents/GitHub/Probability/tests.R', echo=TRUE)
source('tests.R')
# au prealable, vous devez executer l'instruction suivante
# install.packages('randtoolbox')
library(randtoolbox)
source('generateurs.R')
source('tests.R')
sVN <- 9721
sMT <- 2504
Nsimu <- 1000
Nrepet <- 1
grain <- 999
############################################################
##  Section 2
############################################################
vn <- VonNeumann(Nsimu,Nrepet,sVN)
mt <- MersenneTwister(Nsimu,Nrepet,sMT)
ru <- RANDU(Nsimu, grain)
sm <- STANDARD_MINI(Nsimu, grain)
par(mfrow=c(1,2))
hist(mt[,1],xlab='',main='Mersenne Twister')
hist(vn[,1],xlab='',main='Von Neumann')
hist(ru[,1],xlab='',main='RANDU')
hist(sm[,1],xlab='',main='Standard Minimal')
par(mfrow=c(1,2))
plot(mt[1:(Nsimu-1),1],mt[2:Nsimu,1],xlab='MT(i)', ylab='MT(i+1)', main='Mersenne Twister')
plot(vn[1:(Nsimu-1),1],vn[2:Nsimu,1],xlab='VN(i)', ylab='VN(i+1)', main='Von Neumann')
plot(ru[1:(Nsimu-1),1],ru[2:Nsimu,1],xlab='RU(i)', ylab='RU(i+1)', main='RANDU')
plot(sm[1:(Nsimu-1),1],sm[2:Nsimu,1],xlab='SM(i)', ylab='SM(i+1)', main='Standard Minimal')
# Test de fréquence monobit
samples = sample.int(100000,100)
PVMT_F = matrix(nrow=length(samples), ncol=1)
PVRandU_F = matrix(nrow=length(samples), ncol=1)
PVSM_F = matrix(nrow=length(samples), ncol=1)
PVVnM_F = matrix(nrow=length(samples), ncol=1)
for(i in 1:length(samples))
{
vn <- VonNeumann(Nsimu,Nrepet,samples[i])
mt <- MersenneTwister(Nsimu,Nrepet,samples[i])
randu = RANDU(Nsimu, samples[i])
sm = STANDARD_MINI(Nsimu, samples[i])
PVMT_F [i] = Frequency(mt, 32)
PVRandU_F [i] = Frequency(randu, 31)
PVSM_F [i] = Frequency(sm,31)
PVVnM_F [i] = Frequency(vn, 14)
}
par(mfrow=c(2,2))
plot(PVMT_F)
plot(PVVnM_F)
plot(PVRandU_F)
plot(PVSM_F)
good_PVMT_F <- 0
for (i in 1:length(samples) )
{
if (PVMT_F [i] > 0.01)
{
good_PVMT_F  <- good_PVMT_F  +1
}
}
good_PVRANDU_F <- 0
for (i in 1:length(samples) )
{
if (PVRandU_F [i] > 0.01)
{
good_PVRANDU_F <- good_PVRANDU_F  +1
}
}
good_PVSM_F <- 0
for (i in 1:length(samples) )
{
if (PVSM_F [i] > 0.01)
{
good_PVSM_F <- good_PVSM_F  +1
}
}
good_PVnM_F <- 0
for (i in 1:length(samples) )
{
if (PVVnM_F [i] > 0.01)
{
good_PVnM_F <- good_PVnM_F  +1
}
}
print(good_PVMT_F)
print(good_PVnM_F)
print(good_PVSM_F)
print(good_PVRANDU_F)
vnP_F = mean(PVVnM_F)
mtP_F = mean(PVMT_F)
randuP_F = mean(PVRandU_F)
smP_F = mean(PVSM_F)
print(mtP_F)
print(vnP_F)
print(smP_F)
print(randuP_F)
vnSD_F = sd(PVVnM_F)
mtSD_F = sd(PVMT_F)
rdSD_F = sd (PVRandU_F)
smSD_F = sd(PVSM_F)
print(vnSD_F)
print(mtSD_F)
print(rdSD_F)
print(smSD_F)
# Test des Runs
samples = sample.int(100000,100)
PVMT_R = matrix(nrow=length(samples), ncol=1)
PVRandU_R = matrix(nrow=length(samples), ncol=1)
PVSM_R = matrix(nrow=length(samples), ncol=1)
PVVnM_R = matrix(nrow=length(samples), ncol=1)
for(i in 1:length(samples))
{
vn <- VonNeumann(Nsimu,Nrepet,samples[i])
mt <- MersenneTwister(Nsimu,Nrepet,samples[i])
randu = RANDU(Nsimu, samples[i])
sm = STANDARD_MINI(Nsimu, samples[i])
PVMT_R [i] = Runs(mt, 32)
PVRandU_R [i] = Runs(randu, 31)
PVSM_R [i] = Runs(sm,31)
PVVnM_R [i] = Runs(vn, 14)
}
par(mfrow=c(2,2))
plot(PVMT_R)
plot(PVVnM_R)
plot(PVRandU_R)
plot(PVSM_R)
good_PVMT_R <- 0
for (i in 1:length(samples) )
{
if (PVMT_R [i] > 0.01)
{
good_PVMT_R  <- good_PVMT_R  +1
}
}
good_PVRANDU_R <- 0
for (i in 1:length(samples) )
{
if (PVRandU_R [i] > 0.01)
{
good_PVRANDU_R <- good_PVRANDU_R  +1
}
}
good_PVSM_R <- 0
for (i in 1:length(samples) )
{
if (PVSM_R [i] > 0.01)
{
good_PVSM_R <- good_PVSM_R  +1
}
}
good_PVnM_R <- 0
for (i in 1:length(samples) )
{
if (PVVnM_R [i] > 0.01)
{
good_PVnM_R <- good_PVnM_R  +1
}
}
print(good_PVMT_R)
print(good_PVnM_R)
print(good_PVSM_R)
print(good_PVRANDU_R)
vnP_R = mean(PVVnM_R)
mtP_R = mean(PVMT_R)
randuP_R = mean(PVRandU_R)
smP_R = mean(PVSM_R)
vnSD_R = sd(PVVnM_R)
mtSD_R = sd(PVMT_R)
rdSD_R = sd (PVRandU_R)
smSD_R = sd(PVSM_R)
print(vnSD_R)
print(mtSD_R)
print(rdSD_R)
print(smSD_R)
# Test des Runs
samples = sample.int(100000,100)
PVMT_R = matrix(nrow=length(samples), ncol=1)
PVRandU_R = matrix(nrow=length(samples), ncol=1)
PVSM_R = matrix(nrow=length(samples), ncol=1)
PVVnM_R = matrix(nrow=length(samples), ncol=1)
for(i in 1:length(samples))
{
vn <- VonNeumann(Nsimu,Nrepet,samples[i])
mt <- MersenneTwister(Nsimu,Nrepet,samples[i])
randu = RANDU(Nsimu, samples[i])
sm = STANDARD_MINI(Nsimu, samples[i])
PVMT_R [i] = Runs(mt, 32)
PVRandU_R [i] = Runs(randu, 31)
PVSM_R [i] = Runs(sm,31)
PVVnM_R [i] = Runs(vn, 14)
}
par(mfrow=c(2,2))
plot(PVMT_R)
plot(PVVnM_R)
plot(PVRandU_R)
plot(PVSM_R)
good_PVMT_R <- 0
for (i in 1:length(samples) )
{
if (PVMT_R [i] > 0.01)
{
good_PVMT_R  <- good_PVMT_R  +1
}
}
good_PVRANDU_R <- 0
for (i in 1:length(samples) )
{
if (PVRandU_R [i] > 0.01)
{
good_PVRANDU_R <- good_PVRANDU_R  +1
}
}
good_PVSM_R <- 0
for (i in 1:length(samples) )
{
if (PVSM_R [i] > 0.01)
{
good_PVSM_R <- good_PVSM_R  +1
}
}
good_PVnM_R <- 0
for (i in 1:length(samples) )
{
if (PVVnM_R [i] > 0.01)
{
good_PVnM_R <- good_PVnM_R  +1
}
}
print(good_PVMT_R)
print(good_PVnM_R)
print(good_PVSM_R)
print(good_PVRANDU_R)
vnP_R = mean(PVVnM_R)
mtP_R = mean(PVMT_R)
randuP_R = mean(PVRandU_R)
smP_R = mean(PVSM_R)
vnSD_R = sd(PVVnM_R)
mtSD_R = sd(PVMT_R)
rdSD_R = sd (PVRandU_R)
smSD_R = sd(PVSM_R)
print(vnSD_R)
print(mtSD_R)
print(rdSD_R)
print(smSD_R)
print(mtP_R)
print(vnP_R)
print(smP_R)
print(randuP_R)
# Test d'ordre
samples = sample.int(100000,100)
PVMT_O = matrix(nrow=length(samples), ncol=1)
PVRandU_O = matrix(nrow=length(samples), ncol=1)
PVSM_O = matrix(nrow=length(samples), ncol=1)
PVVnM_O = matrix(nrow=length(samples), ncol=1)
for(i in 1:length(samples))
{
vn <- VonNeumann(Nsimu,Nrepet,samples[i])
mt <- MersenneTwister(Nsimu,Nrepet,samples[i])
randu = RANDU(Nsimu, samples[i])
sm = STANDARD_MINI(Nsimu, samples[i])
PVMT_O [i] = randtoolbox::order.test(mt[,1], d=4, echo=FALSE)$p.value
PVRandU_O [i] = randtoolbox::order.test(randu[,1], d=4, echo=FALSE)$p.value
PVSM_O [i] = randtoolbox::order.test(sm[,1], d=4, echo=FALSE)$p.value
PVVnM_O [i] = randtoolbox::order.test(vn[,1], d=4, echo=FALSE)$p.value
}
par(mfrow=c(2,2))
plot(PVMT_O)
plot(PVVnM_O)
plot(PVRandU_O)
plot(PVSM_O)
good_PVMT_O <- 0
for (i in 1:length(samples) )
{
if (PVMT_O [i] > 0.01)
{
good_PVMT_O  <- good_PVMT_O  +1
}
}
good_PVRANDU_O <- 0
for (i in 1:length(samples) )
{
if (PVRandU_O [i] > 0.01)
{
good_PVRANDU_O <- good_PVRANDU_O  +1
}
}
good_PVSM_O <- 0
for (i in 1:length(samples) )
{
if (PVSM_O [i] > 0.01)
{
good_PVSM_O <- good_PVSM_O  +1
}
}
good_PVnM_O <- 0
for (i in 1:length(samples) )
{
if (PVVnM_O [i] > 0.01)
{
good_PVnM_O <- good_PVnM_O  +1
}
}
print(good_PVMT_O)
print(good_PVnM_O)
print(good_PVSM_O)
print(good_PVRANDU_O)
vnP_O = mean(PVVnM_O)
mtP_O = mean(PVMT_O)
randuP_O = mean(PVRandU_O)
smP_O = mean(PVSM_O)
print(mtP_O)
print(vnP_O)
print(smP_O)
print(randuP_O)
vnSD_O = sd(PVVnM_O)
mtSD_O = sd(PVMT_O)
rdSD_O = sd (PVRandU_O)
smSD_O = sd(PVSM_O)
print(vnSD_O)
print(mtSD_O)
print(rdSD_O)
print(smSD_O)
# Test d'ordre
samples = sample.int(100000,100)
PVMT_O = matrix(nrow=length(samples), ncol=1)
PVRandU_O = matrix(nrow=length(samples), ncol=1)
PVSM_O = matrix(nrow=length(samples), ncol=1)
PVVnM_O = matrix(nrow=length(samples), ncol=1)
for(i in 1:length(samples))
{
vn <- VonNeumann(Nsimu,Nrepet,samples[i])
mt <- MersenneTwister(Nsimu,Nrepet,samples[i])
randu = RANDU(Nsimu, samples[i])
sm = STANDARD_MINI(Nsimu, samples[i])
PVMT_O [i] = randtoolbox::order.test(mt[,1], d=4, echo=FALSE)$p.value
PVRandU_O [i] = randtoolbox::order.test(randu[,1], d=4, echo=FALSE)$p.value
PVSM_O [i] = randtoolbox::order.test(sm[,1], d=4, echo=FALSE)$p.value
PVVnM_O [i] = randtoolbox::order.test(vn[,1], d=4, echo=FALSE)$p.value
}
par(mfrow=c(2,2))
plot(PVMT_O)
plot(PVVnM_O)
plot(PVRandU_O)
plot(PVSM_O)
good_PVMT_O <- 0
for (i in 1:length(samples) )
{
if (PVMT_O [i] > 0.01)
{
good_PVMT_O  <- good_PVMT_O  +1
}
}
good_PVRANDU_O <- 0
for (i in 1:length(samples) )
{
if (PVRandU_O [i] > 0.01)
{
good_PVRANDU_O <- good_PVRANDU_O  +1
}
}
good_PVSM_O <- 0
for (i in 1:length(samples) )
{
if (PVSM_O [i] > 0.01)
{
good_PVSM_O <- good_PVSM_O  +1
}
}
good_PVnM_O <- 0
for (i in 1:length(samples) )
{
if (PVVnM_O [i] > 0.01)
{
good_PVnM_O <- good_PVnM_O  +1
}
}
print(good_PVMT_O)
print(good_PVnM_O)
print(good_PVSM_O)
print(good_PVRANDU_O)
vnP_O = mean(PVVnM_O)
mtP_O = mean(PVMT_O)
randuP_O = mean(PVRandU_O)
smP_O = mean(PVSM_O)
print(mtP_O)
print(vnP_O)
print(smP_O)
print(randuP_O)
vnSD_O = sd(PVVnM_O)
mtSD_O = sd(PVMT_O)
rdSD_O = sd (PVRandU_O)
smSD_O = sd(PVSM_O)
print(vnSD_O)
print(mtSD_O)
print(rdSD_O)
print(smSD_O)
queue <- FileMM1(8,15,12)
results <-MM1Evolution(queue)
plot(results[[1]],results[[2]],'s')
source('~/Documents/GitHub/Probability/functions.R', echo=TRUE)
queue <- FileMM1(8,15,12)
results <-MM1Evolution(queue)
plot(results[[1]],results[[2]],'s')
queue <- FileMM1(8,15,12)
results <-MM1Evolution(queue)
plot(results[[1]],results[[2]],'s')
queue <- FileMM1(8,15,12)
results <-MM1Evolution(queue)
plot(results[[1]],results[[2]],'s')
queue <- FileMM1(8,15,12)
results <-MM1Evolution(queue)
plot(results[[1]],results[[2]],'s')
Générateur | Moyenne | Écart Type | Nombre de p valeurs > 1%
------------- | ------------- | ------------- | -------------
Mersenne Twister    | 0.5608341   | 0.2776735  | 99
Standard Minimal      | 0.4934389  | 0.3028145 | 98
RANDU      | 0.2360877 | 0.3425761 | 38
Von Neumann      | 0 | 0 | 0
##### Tableau 3: Distribution des p-valeurs pour le test des Runs
install.packages('knitr')
knitr::opts_chunk$set(echo = TRUE, fig.align="left")
